#!/usr/bin/env python3
"""
Test script for WhatsApp length limiting functionality
Tests the _ensure_whatsapp_length_limit function
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from whatsapp_bot import EnhancedWhatsAppBot, EnhancedSTTService, EnhancedTTSService


class MockRAGPipeline:
    """Mock RAG pipeline for testing"""
    async def query(self, text, user_id=None):
        return {"status": "success", "answer": "Mock response"}


def test_length_limiting():
    """Test the WhatsApp length limiting functionality"""
    
    # Create mock services
    stt_service = EnhancedSTTService()
    tts_service = EnhancedTTSService()
    rag_pipeline = MockRAGPipeline()
    
    # Create WhatsApp bot
    bot = EnhancedWhatsAppBot(rag_pipeline, stt_service, tts_service)
    
    print("üß™ Testing WhatsApp message length limiting...")
    print(f"üìè Character limit: {bot.whatsapp_char_limit}")
    print()
    
    # Test 1: Short message (should pass through unchanged)
    short_msg = "This is a short message that should pass through unchanged."
    result1 = bot._ensure_whatsapp_length_limit(short_msg)
    print(f"Test 1 - Short message:")
    print(f"  Input length: {len(short_msg)}")
    print(f"  Output length: {len(result1)}")
    print(f"  Changed: {'Yes' if result1 != short_msg else 'No'}")
    print(f"  Output: {result1[:100]}...")
    print()
    
    # Test 2: Long message (should be truncated)
    long_msg = """‡§™‡•à‡§≤‡§ø‡§Ø‡•á‡§ü‡§ø‡§µ ‡§ï‡•á‡§Ø‡§∞ ‡§è‡§ï ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§π‡•à ‡§ú‡•ã ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä ‡§∏‡•á ‡§™‡•Ä‡§°‡§º‡§ø‡§§ ‡§∞‡•ã‡§ó‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¶‡§∞‡•ç‡§¶ ‡§î‡§∞ ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§∏‡•á ‡§∞‡§æ‡§π‡§§ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à‡•§ ‡§Ø‡§π ‡§è‡§ï ‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§¶‡•É‡§∑‡•ç‡§ü‡§ø‡§ï‡•ã‡§£ ‡§π‡•à ‡§ú‡•ã ‡§® ‡§ï‡•á‡§µ‡§≤ ‡§∂‡§æ‡§∞‡•Ä‡§∞‡§ø‡§ï ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡§æ ‡§á‡§≤‡§æ‡§ú ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§¨‡§≤‡•ç‡§ï‡§ø ‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï, ‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§î‡§∞ ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§ú‡§∞‡•Ç‡§∞‡§§‡•ã‡§Ç ‡§ï‡§æ ‡§≠‡•Ä ‡§ñ‡•ç‡§Ø‡§æ‡§≤ ‡§∞‡§ñ‡§§‡§æ ‡§π‡•à‡•§ ‡§™‡•à‡§≤‡§ø‡§Ø‡•á‡§ü‡§ø‡§µ ‡§ï‡•á‡§Ø‡§∞ ‡§ü‡•Ä‡§Æ ‡§Æ‡•á‡§Ç ‡§°‡•â‡§ï‡•ç‡§ü‡§∞, ‡§®‡§∞‡•ç‡§∏, ‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡§∞‡•ç‡§§‡§æ, ‡§Æ‡§®‡•ã‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï, ‡§ö‡•à‡§™‡•ç‡§≤‡§ø‡§® ‡§î‡§∞ ‡§Ö‡§®‡•ç‡§Ø ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§Ø‡§π ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§â‡§Æ‡•ç‡§∞ ‡§ï‡•á ‡§∞‡•ã‡§ó‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡•Ä ‡§ú‡§æ ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à ‡§î‡§∞ ‡§á‡§∏‡§ï‡§æ ‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø ‡§ú‡•Ä‡§µ‡§® ‡§ï‡•Ä ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡§∞‡§®‡§æ ‡§π‡•à‡•§ ‡§™‡•à‡§≤‡§ø‡§Ø‡•á‡§ü‡§ø‡§µ ‡§ï‡•á‡§Ø‡§∞ ‡§Æ‡•á‡§Ç ‡§¶‡§∞‡•ç‡§¶ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®, ‡§∏‡§æ‡§Ç‡§∏ ‡§ï‡•Ä ‡§§‡§ï‡§≤‡•Ä‡§´ ‡§ï‡§æ ‡§á‡§≤‡§æ‡§ú, ‡§Æ‡§§‡§≤‡•Ä ‡§î‡§∞ ‡§â‡§≤‡•ç‡§ü‡•Ä ‡§ï‡§æ ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£, ‡§•‡§ï‡§æ‡§® ‡§ï‡§æ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•à‡•§ ‡§Ø‡§π ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•á ‡§∏‡§¶‡§∏‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§≠‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à ‡§î‡§∞ ‡§â‡§®‡•ç‡§π‡•á‡§Ç ‡§Æ‡•Å‡§ï‡§æ‡§¨‡§≤‡§æ ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§∞‡§£‡§®‡•Ä‡§§‡§ø ‡§∏‡§ø‡§ñ‡§æ‡§§‡•Ä ‡§π‡•à‡•§ ‡§™‡•à‡§≤‡§ø‡§Ø‡•á‡§ü‡§ø‡§µ ‡§ï‡•á‡§Ø‡§∞ ‡§ï‡§æ ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø ‡§∞‡•ã‡§ó‡•Ä ‡§î‡§∞ ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§ú‡•Ä‡§µ‡§® ‡§∏‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§®‡§æ ‡§π‡•à‡•§ ‡§Ø‡§π ‡§ï‡•á‡§Ø‡§∞ ‡§ò‡§∞ ‡§™‡§∞, ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§Æ‡•á‡§Ç, ‡§Ø‡§æ ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§™‡•à‡§≤‡§ø‡§Ø‡•á‡§ü‡§ø‡§µ ‡§ï‡•á‡§Ø‡§∞ ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§ì‡§Ç ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡•Ä ‡§ú‡§æ ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡•§ ‡§™‡•à‡§≤‡§ø‡§Ø‡•á‡§ü‡§ø‡§µ ‡§ï‡•á‡§Ø‡§∞ ‡§Æ‡•á‡§Ç ‡§®‡•á‡§§‡§æ ‡§ü‡•Ä‡§Æ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Æ‡§ø‡§≤‡§ï‡§∞ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§¨‡§®‡§æ‡§§‡•á ‡§π‡•à‡§Ç ‡§ú‡•ã ‡§∞‡•ã‡§ó‡•Ä ‡§ï‡•Ä ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤ ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§ ‡§Ø‡§π ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§®‡§ø‡§∞‡§Ç‡§§‡§∞ ‡§π‡•ã‡§§‡•Ä ‡§π‡•à ‡§î‡§∞ ‡§∞‡•ã‡§ó‡•Ä ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§∏‡§Æ‡§æ‡§Ø‡•ã‡§ú‡§ø‡§§ ‡§ï‡•Ä ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à‡•§""" * 3  # Make it very long
    
    result2 = bot._ensure_whatsapp_length_limit(long_msg)
    print(f"Test 2 - Long message:")
    print(f"  Input length: {len(long_msg)}")
    print(f"  Output length: {len(result2)}")
    print(f"  Truncated: {'Yes' if len(result2) < len(long_msg) else 'No'}")
    print(f"  Under limit: {'Yes' if len(result2) <= bot.whatsapp_char_limit else 'No'}")
    print(f"  Output preview: {result2[:200]}...")
    print(f"  Output ending: ...{result2[-100:]}")
    print()
    
    # Test 3: Message exactly at limit
    limit_msg = "x" * bot.whatsapp_char_limit
    result3 = bot._ensure_whatsapp_length_limit(limit_msg)
    print(f"Test 3 - Message at exact limit:")
    print(f"  Input length: {len(limit_msg)}")
    print(f"  Output length: {len(result3)}")
    print(f"  Changed: {'Yes' if result3 != limit_msg else 'No'}")
    print()
    
    # Test 4: Message slightly over limit
    over_limit_msg = "x" * (bot.whatsapp_char_limit + 10)
    result4 = bot._ensure_whatsapp_length_limit(over_limit_msg)
    print(f"Test 4 - Message slightly over limit:")
    print(f"  Input length: {len(over_limit_msg)}")
    print(f"  Output length: {len(result4)}")
    print(f"  Truncated: {'Yes' if len(result4) < len(over_limit_msg) else 'No'}")
    print(f"  Under limit: {'Yes' if len(result4) <= bot.whatsapp_char_limit else 'No'}")
    print()
    
    # Test 5: Message with sentences
    sentence_msg = "This is sentence one. This is sentence two. This is sentence three. " * 100
    result5 = bot._ensure_whatsapp_length_limit(sentence_msg)
    print(f"Test 5 - Message with sentences:")
    print(f"  Input length: {len(sentence_msg)}")
    print(f"  Output length: {len(result5)}")
    print(f"  Under limit: {'Yes' if len(result5) <= bot.whatsapp_char_limit else 'No'}")
    print(f"  Ends with period: {'Yes' if result5.rstrip().endswith('.') else 'No'}")
    print(f"  Has truncation notice: {'Yes' if 'truncated' in result5 else 'No'}")
    print()
    
    print("‚úÖ Length limiting tests completed!")


if __name__ == "__main__":
    test_length_limiting()